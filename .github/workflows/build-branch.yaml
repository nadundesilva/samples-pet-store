name: Build Branch

on: [push, pull_request]

jobs:
  codeql-analyze:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v2
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  ossar-analyze:
    name: OSSAR Analyze
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Run OSSAR
        uses: github/ossar-action@v1
        id: ossar
      - name: Upload OSSAR results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}

  build-base:
    name: Build Base
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Login to the Container registry
        uses: docker/login-action@v2
        with:
            username: nadunrds
            password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build & Push Docker Image
        run: |
          docker build -t nadunrds/samples-pet-store-runtime-base:latest -f docker/runtime_base/Dockerfile .
          docker push nadunrds/samples-pet-store-runtime-base:latest

          docker build -t nadunrds/samples-pet-store-builder-base:latest -f docker/builder_base/Dockerfile .
          docker push nadunrds/samples-pet-store-builder-base:latest

  build:
    name: Build Sample
    runs-on: ubuntu-20.04
    needs:
      - build-base
      - codeql-analyze
      - ossar-analyze
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10.0"
          architecture: x64
      - name: Lint Code Base
        uses: psf/black@stable
        with:
          args: ". --check"
      - name: Run Tests
        run: |
          python3 -m pip install --upgrade coverage
          coverage run --branch --source=./src/ setup.py test
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          fail_ci_if_error: true
      - name: Login to the Container registry
        uses: docker/login-action@v2
        with:
            username: nadunrds
            password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: Build & Push Docker Image
        run: |
          sudo apt install docker-compose
          docker-compose build
          docker-compose push
        env:
          VERSION: latest

  test-pet-store:
    name: Test Pet Store
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Dockerize
        run: |
          wget https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          tar -C /usr/local/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
        env:
          DOCKERIZE_VERSION: v0.6.1
      - name: Test Service Startup
        run: |
          echo "Purging all docker data for the test"
          docker logout ghcr.io
          docker rmi -f $(docker images -a -q)

          cleanup() {
            echo
            echo "Logs of services"
            docker-compose logs

            echo
            echo "Cleaning up containers of services"
            docker-compose down
          }
          trap cleanup EXIT

          echo
          echo "Starting services"
          docker-compose pull
          docker-compose up --force-recreate --renew-anon-volumes --no-build --detach

          echo
          echo "Waiting for the services to startup"
          dockerize -wait http://localhost:8080/health -wait http://localhost:16686 -timeout 2m

          echo
          echo "Testing the health of the services"
          SERVER_OUTPUT=$(curl http://localhost:8080/health | jq -r .status)
          if [ ! "$SERVER_OUTPUT" == "READY" ]; then
            exit 1
          fi
        env:
          VERSION: latest

  test-pet-store-log-collection:
    name: Test Pet Store Log Collection
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Setup Dockerize
        run: |
          wget https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          tar -C /usr/local/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
        env:
          DOCKERIZE_VERSION: v0.6.1
      - name: Test Service Startup
        run: |
          echo "Purging all docker data for the test"
          docker logout ghcr.io
          docker rmi -f $(docker images -a -q)

          cleanup() {
            echo
            echo "Logs of services"
            docker-compose -f ./log-collection/docker-compose-collector.yaml logs

            echo
            echo "Cleaning up containers of services"
            docker-compose -f ./log-collection/docker-compose-collector.yaml down

            echo
            echo "Logs of log collection setup"
            docker-compose -f docker-compose.yaml -f log-collection/docker-compose-pet-store-override.yaml logs

            echo
            echo "Cleaning up containers of log collection setup"
            docker-compose -f docker-compose.yaml -f log-collection/docker-compose-pet-store-override.yaml down
          }
          trap cleanup EXIT

          echo "Starting log collection setup"
          docker-compose -f ./log-collection/docker-compose-collector.yaml pull
          docker-compose -f ./log-collection/docker-compose-collector.yaml up --force-recreate --renew-anon-volumes --no-build --detach

          echo
          echo "Waiting for the log collection setup to startup"
          dockerize -wait http://localhost:5601 -timeout 2m

          echo
          echo "Starting services"
          docker-compose -f docker-compose.yaml -f log-collection/docker-compose-pet-store-override.yaml pull
          docker-compose -f docker-compose.yaml -f log-collection/docker-compose-pet-store-override.yaml up --force-recreate --renew-anon-volumes --no-build --detach

          echo
          echo "Waiting for the services to startup"
          dockerize -wait http://localhost:8080/health -wait http://localhost:16686 -timeout 2m

          echo
          echo "Testing the health of the services"
          SERVER_OUTPUT=$(curl http://localhost:8080/health | jq -r .status)
          if [ ! "$SERVER_OUTPUT" == "READY" ]; then
            exit 1
          fi
        env:
          VERSION: latest
