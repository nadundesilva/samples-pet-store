name: Build Branch

on: [push, pull_request]

jobs:
  build-base:
    name: Build Base
    runs-on: ubuntu-20.04
    permissions:
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Docker Image
        run: |
          docker build -t ghcr.io/nadundesilva/samples/pet-store/runtime-base:latest -f docker/runtime_base/Dockerfile .
          docker push ghcr.io/nadundesilva/samples/pet-store/runtime-base:latest

          docker build -t ghcr.io/nadundesilva/samples/pet-store/builder-base:latest -f docker/builder_base/Dockerfile .
          docker push ghcr.io/nadundesilva/samples/pet-store/builder-base:latest

  codeql-analyze:
    name: CodeQL Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: python
      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

  ossar-analyze:
    name: OSSAR Analyze
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Install .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '3.1.x'
      - name: Run OSSAR
        uses: github/ossar-action@v1
        id: ossar
      - name: Upload OSSAR results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ${{ steps.ossar.outputs.sarifFile }}

  build:
    name: Build Sample
    runs-on: ubuntu-20.04
    needs: build-base
    permissions:
      packages: write
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9.7"
          architecture: x64
      - name: Lint Code Base
        uses: psf/black@stable
        with:
          args: ". --check"
      - name: Run Tests
        run: |
          python3 -m pip install --upgrade coverage
          coverage run --branch --source=./src/ setup.py test
      - name: Upload Coverage Report
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: true
      - name: Login to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build & Push Docker Image
        run: |
          sudo apt install docker-compose
          docker-compose build
          docker-compose push
        env:
          VERSION: latest
      - name: Test Service Startup
        run: |
          echo "Purging all docker data for the test"
          docker logout ghcr.io
          docker rmi -f $(docker images -a -q)

          cleanup() {
            echo
            echo "Logs of services"
            docker-compose logs

            echo
            echo "Cleaning up containers"
            docker-compose down
          }
          trap cleanup EXIT

          echo
          echo "Starting services"
          docker-compose pull
          docker-compose up --no-build --force-recreate --renew-anon-volumes --detach

          echo
          echo "Waiting for the services to startup"
          export DOCKERIZE_VERSION=v0.6.1
          wget https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          tar -C /usr/local/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz
          dockerize -wait http://localhost:8080/health -timeout 2m

          echo
          echo "Testing the health of the services"
          SERVER_OUTPUT=$(curl http://localhost:8080/health | jq -r .status)
          if [ ! "$SERVER_OUTPUT" == "Ready" ]; then
            exit 1
          fi
        env:
          VERSION: latest
